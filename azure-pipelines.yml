# https://docs.microsoft.com/azure/devops/pipelines/yaml-schema

variables:
  - group: 'Secrets'

stages:
- stage: BuildStage
  displayName: 'Build'
  jobs:
  - job: BuildJob
    displayName: 'Build'
    pool:
      vmImage: 'ubuntu-latest'
    workspace:
      clean: all

    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        useGlobalJson: true

    - task: DotNetCoreCLI@2
      displayName: 'Pack'
      inputs:
        command: pack
        packDirectory: 'artifacts'

    - publish: '$(Build.Repository.LocalPath)/artifacts'
      displayName: 'Publish artifacts'
      artifact: 'packages'

- stage: PublishAlphaPackageStage
  displayName: 'Publish alpha package'
  dependsOn: BuildStage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment:
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Github package repository'
    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            displayName: 'Download artifacts'
            artifact: 'packages'

          - task: PowerShell@2
            displayName: 'Push the packages to GitHub Packages'
            env:
              GITHUB_API_KEY: $(GITHUB_API_KEY)
            inputs:
              targetType: 'inline'
              script: |
                dotnet tool install -g gpr
                gpr push --api-key $env:GITHUB_API_KEY $(Pipeline.Workspace)/packages/*.nupkg
              failOnStderr: true
              ignoreLASTEXITCODE: true

# https://github.com/microsoft/azure-pipelines-yaml/issues/344
- stage: PublishFinalPackageStage
  displayName: 'Publish final package'
  dependsOn: PublishAlphaPackageStage
  condition: succeeded()
  jobs:
  - deployment:
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Nuget org'
    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            displayName: 'Download artifacts'
            artifact: 'packages'

          - task: NuGetCommand@2
            displayName: 'Push the packages to Nuget.org'
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/packages/*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'PingctNugetConnection'